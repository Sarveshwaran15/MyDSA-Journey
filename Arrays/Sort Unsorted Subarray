Given an unsorted array arr[]. Find the subarray arr[s...e] such that sorting this subarray makes the whole array sorted.

Note: If the given array is already sorted then return [0, 0].

Examples:

Input: arr[] = [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60]
Output: [3, 8]
Explanation: Sorting subarray starting from index 3 and ending at index 8 results in sorted array. 
Initial array: [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60], 
Final array: [10, 12, 20, 25, 30, 31, 32, 35, 40, 50, 60](After sorting the bold part).

class Solution {
    public int[] printUnsorted(int[] arr) {
        // Code here
        int n = arr.length;
        int s = 0, e = n - 1;
        while (s < n - 1 && arr[s] <= arr[s + 1]) {
            s++;
        }
        if (s == n - 1) {
            return new int[]{0, 0};
        }
        while (e > 0 && arr[e] >= arr[e - 1]) {
            e--;
        }
        int min = arr[s], max = arr[s];
        for (int i = s; i <= e; i++) {
            if (arr[i] < min) min = arr[i];
            if (arr[i] > max) max = arr[i];
        }
        for (int i = 0; i < s; i++) {
            if (arr[i] > min) {
                s = i;
                break;
            }
        }
        for (int i = n - 1; i > e; i--) {
            if (arr[i] < max) {
                e = i;
                break;
            }
        }
        return new int[]{s, e};
    }
}
