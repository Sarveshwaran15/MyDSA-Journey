Given n leaves numbered from 1 to n. A caterpillar at leaf 1. The array contains the jump power of the caterpillar.  
The caterpillar jumps from leaf to leaf in multiples of arr[j],  j is specific to the caterpillar.
Whenever a caterpillar reaches a leaf, it eats it a little bit. 
You have to find out how many leaves are left uneaten after all caterpillars have reached the end. 
Each caterpillar has its own jump factor denoted by arr[j], and each caterpillar starts at leaf number 1.

Examples:

Input: arr[] = [2, 3, 5], n = 10 
Output: 2
Explanation: The leaves eaten by the first caterpillar are (2, 4, 6, 8, 10). 
The leaves eaten by the second caterpilllar are (3, 6, 9). 
The leaves eaten by the third caterpilllar are (5, 10). Ultimately, the uneaten leaves are 1, 7 and their number is 2.

import java.util.*;

class Solution {
    public int uneatenLeaves(int[] arr, int n) {
        boolean[] eaten = new boolean[n + 1];  
        for (int jump : arr) {
            if (jump <= n) {
                for (int leaf = jump; leaf <= n; leaf += jump) {
                    eaten[leaf] = true; 
                }
            }
        }
        int count = 0;
        for (int leaf = 1; leaf <= n; leaf++) {
            if (!eaten[leaf]) {
                count++;
            }
        }
        return count;
    }
}
