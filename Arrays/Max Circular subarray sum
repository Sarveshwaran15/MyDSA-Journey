You are given a circular array arr[] of integers, find the maximum possible sum of a non-empty subarray. 
In a circular array, the subarray can start at the end and wrap around to the beginning. 
Return the maximum non-empty subarray sum, considering both non-wrapping and wrapping cases.

Examples:

Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion,
we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.

class Solution {
    public int maxCircularSum(int arr[]) {
        int n = arr.length;
        int totalSum = 0;
        int maxSum = arr[0];
        int currMax = arr[0];
        int minSum = arr[0];
        int currMin = arr[0];
        for (int i = 1; i < n; i++) {
            currMax = Math.max(arr[i], currMax + arr[i]);
            maxSum = Math.max(maxSum, currMax);
            currMin = Math.min(arr[i], currMin + arr[i]);
            minSum = Math.min(minSum, currMin);
            totalSum += arr[i];
        }
        totalSum += arr[0];
        if (maxSum < 0) 
            return maxSum;
        return Math.max(maxSum, totalSum - minSum);
    }
}
