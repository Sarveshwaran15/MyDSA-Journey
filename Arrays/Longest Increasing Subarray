Given an array arr[] of integers. 
The problem is finding the longest contiguous subarray's length such that every element is strictly greater than its previous element in the same subarray.

Examples:

Input: arr[] = [5, 6, 3, 5, 7, 8, 9, 1, 2]
Output: 5
Explanation: here the subarray arr[2:6] = [3, 5, 7, 8, 9] is longest subarray to follow strictly increasing order.

class Solution {
    public int lenOfLongIncSubArr(List<Integer> arr) {
        // Your Code goes here.
        if (arr == null || arr.size() == 0) return 0;
        int maxLen = 1; 
        int currLen = 1;
        for (int i = 1; i < arr.size(); i++) {
            if (arr.get(i) > arr.get(i - 1)) {
                currLen++;
                maxLen = Math.max(maxLen, currLen);
            } else {
                currLen = 1; 
            }
        }
        return maxLen;
    }
}
