Given an array arr with positive integers, the task is to find the largest subsequence from the array which contains only Fibonacci numbers.

Examples:

Input: arr[] = [1, 4, 3, 9, 10, 13, 7]
Output: [1, 3, 13]
Explanation: The output three numbers are Fibonacci numbers.


class Solution {

    public ArrayList<Integer> findFibSubset(int arr[]) {
        // code here
        ArrayList<Integer> result = new ArrayList<>();
        int max = 0;
        for (int num : arr) {
            if (num > max)
                max = num;
        }
        Set<Integer> fibSet = new HashSet<>();
        int a = 0, b = 1;
        fibSet.add(a);
        fibSet.add(b);
        while (b <= max) {
            int c = a + b;
            fibSet.add(c);
            a = b;
            b = c;
        }
        for (int num : arr) {
            if (fibSet.contains(num)) {
                result.add(num);
            }
        }

        return result;
    }
}
